%%
%% exam-randomizechoices.sty
%%
%% Randomize mc choices using the exam class
%%
%% (c)2018 Jesse op den Brouw, <J.E.J.opdenBrouw@hhs.nl>
%%
%% LPPL LaTeX Public Project License
%%
%% Permission is granted to copy, distribute and/or modify this
%% software under the terms of the LaTeX Project Public License
%% (LPPL), version 1.3c or any later version.
%%
%% This software is provided 'as is', without warranty of any kind,
%% either expressed or implied, including, but not limited to, the
%% implied warranties of merchantability and fitness for a
%% particular purpose.
%%
%% Ideas taken from the mcexam package, see https://ctan.org/pkg/mcexam
%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% What (La)TeX format do we need and version and date
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\NeedsTeXFormat{LaTeX2e}[1994/06/01]
%% Version and date
\gdef\fileversion{0.1$\delta$}
\gdef\filedate{2018/08/17}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% Sign up to (La)TeX
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\ProvidesPackage{exam-randomizechoices}[\filedate\space V\fileversion\space
 LaTeX package for creating random placed choices in multiple choice environments using the exam document class]

\PackageWarning{exam-randomizechoices}{THIS PACKAGE IS EXPERIMENTAL.}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% Check if the exam class is loaded
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\@ifclassloaded{exam}%
  {}%
  {\PackageError{exam-randomizechoices}{The exam class is not loaded. Emergency stop!}{You didn't load the exam class explicit using \string\documentclass\space or implied by another class.}\stop}%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% Process package options
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Want debug messages
\newif\if@@ercdebug\@@ercdebugfalse
\DeclareOption{debug}{\PackageWarning{exam-randomizechoices}{Debug turned on}\@@ercdebugtrue}

%% Want to overload or not overload the *choices and *checkboxes environments?
\newif\if@@ercoverload\@@ercoverloadfalse
\DeclareOption{overload}{\if@@ercdebug\PackageWarning{exam-randomizechoices}{Overload turned on}\fi\@@ercoverloadtrue}
\DeclareOption{nooverload}{\if@@ercdebug\PackageWarning{exam-randomizechoices}{Overload turned off}\fi\@@ercoverloadfalse}

%% Global keeplast
\newif\if@@ercgkeeplast\@@ercgkeeplastfalse
\DeclareOption{keeplast}{\if@@ercdebug\PackageWarning{exam-randomizechoices}{Global keeplast turned on}\fi\@@ercgkeeplasttrue}
\DeclareOption{nokeeplast}{\if@@ercdebug\PackageWarning{exam-randomizechoices}{Global keeplast turned off}\fi\@@ercgkeeplastfalse}

%% Global random
\newif\if@@ercgrandom\@@ercgrandomtrue
\DeclareOption{randomize}{\if@@ercdebug\PackageWarning{exam-randomizechoices}{Global randomization turned on}\fi\@@ercgrandomtrue}
\DeclareOption{norandomize}{\if@@ercdebug\PackageWarning{exam-randomizechoices}{Global randomization turned off}\fi\@@ercgrandomfalse}

%% Use ordinal numbering
\newif\iferc@@refcheckboxes\erc@@refcheckboxesfalse
\DeclareOption{refcheckboxes}{\if@@ercdebug\PackageWarning{exam-randomizechoices}{Reference checkboxes turned on.}\fi\erc@@refcheckboxestrue}
\DeclareOption{norefcheckboxes}{\if@@ercdebug\PackageWarning{exam-randomizechoices}{Reference checkboxes turned off.}\fi\erc@@refcheckboxesfalse}

%% Unknown option
\DeclareOption*{\PackageWarning{exam-randomizechoices}{Unknown option '\CurrentOption'}}
\ProcessOptions\relax


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% Load needed packages
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% http://ctan.org/pkg/{environ,etoolbox,pgffor}
\@ifpackageloaded{environ}{\if@@ercdebug\PackageWarning{exam-randomizechoicces}{Package environ already loaded}\fi}{\RequirePackage{environ}}
\@ifpackageloaded{etoolbox}{\if@@ercdebug\PackageWarning{exam-randomizechoicces}{Package etoolbox already loaded}\fi}{\RequirePackage{etoolbox}}
\@ifpackageloaded{pgffor}{\if@@ercdebug\PackageWarning{exam-randomizechoicces}{Package pgffor already loaded}\fi}{\RequirePackage{pgffor}}


%% A scratch counter
\newcounter{erc@counter}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% Loading the randomizer seed
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newif\if@@seedset\@@seedsetfalse
\newcommand{\setrandomizerseed}[1]{
	\pgfmathsetseed{#1}
	\global\@@seedsettrue
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%                                                       %%
%% Implementing references for the checkboxes and        %%
%% oneparcheckboxes environment.                         %%
%%                                                       %% 
%% Ordinal numbering scheme for the checkboxes and       %%
%% oneparscheckboxes environments when using \ref et al. %%
%%                                                       %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\iferc@@refcheckboxes
  \newcounter{checkbox}
  \renewcommand\thecheckbox{\ordinal{checkbox}}
  %\renewcommand\thecheckbox{\Alph{checkbox}}
  \newcommand\checkboxlabel{\thecheckbox.}
  \def\erc@textsuperscript#1{$^\text{#1}$}

  %\show\thecheckbox
  %\show\@oldoneparcheckboxes

  \def\ordinal#1{\expandafter\lc@ordinal\csname c@#1\endcsname}
  \def\lc@ordinal#1{%
    \ifcase #1\or 1\erc@textsuperscript{st}\or  2\erc@textsuperscript{nd}\or
                  3\erc@textsuperscript{rd}\or  4\erc@textsuperscript{th}\or
                  5\erc@textsuperscript{th}\or  6\erc@textsuperscript{th}\or
                  7\erc@textsuperscript{th}\or  8\erc@textsuperscript{th}\or
                  9\erc@textsuperscript{th}\or 10\erc@textsuperscript{th}\or
                 11\erc@textsuperscript{th}\or 12\erc@textsuperscript{th}\or
                 13\erc@textsuperscript{th}\or 14\erc@textsuperscript{th}\or
                 15\erc@textsuperscript{th}\or 16\erc@textsuperscript{th}\or
                 17\erc@textsuperscript{th}\or 18\erc@textsuperscript{th}\or
                 19\erc@textsuperscript{th}\or 20\erc@textsuperscript{th}\or
                 21\erc@textsuperscript{st}\or 22\erc@textsuperscript{nd}\or
                 23\erc@textsuperscript{rd}\or 24\erc@textsuperscript{th}\or
                 25\erc@textsuperscript{th}\or 26\erc@textsuperscript{th}
                   \else \@ctrerr
    \fi
  }%

  %% Start patching the standard *checkboxes environment

  \setcounter{erc@counter}{0}
  %% Counter for counting the number of correct choices
  \def\@incr{\stepcounter{erc@counter}}
  \patchcmd{\oneparcheckboxes}{\setcounter{choice}}{\setcounter{checkbox}}{\@incr}{}

  \patchcmd{\oneparcheckboxes}{{choice}}{{checkbox}}{\@incr}{}
  \patchcmd{\oneparcheckboxes}{{choice}}{{checkbox}}{\@incr}{}
  \patchcmd{\oneparcheckboxes}{{choice}}{{checkbox}}{\@incr}{}
  \patchcmd{\oneparcheckboxes}{{choice}}{{checkbox}}{\@incr}{}
%  \patchcmd{\oneparcheckboxes}{{choice}}{{checkbox}}{\@incr}{}

    \PackageWarning{test}{Applied \theerc@counter\space patches}


  \patchcmd{\oneparcheckboxes}{\stepcounter}{\refstepcounter}{\@incr}{}
  \patchcmd{\oneparcheckboxes}{\stepcounter}{\refstepcounter}{\@incr}{}
%  \patchcmd{\oneparcheckboxes}{\stepcounter}{\refstepcounter}{\@incr}{}

    \PackageWarning{test}{Applied \theerc@counter\space patches}

%  \show\checkboxes
  \patchcmd{\checkboxes}{\settowidth }{\usecounter {checkbox}\def\makelabel##1{\hss\llap{##1}} \settowidth }{\@incr}{}
  \patchcmd{\checkboxes}{\item [\checked@char ]}{\refstepcounter {checkbox} \item [\checked@char ]}{\@incr}{}
%  \show\checkboxes
  %% End patching the standard *checkboxes environment

  \ifnum \theerc@counter=9
    \PackageWarning{test}{Applied \theerc@counter\space patches}
  \else
    \PackageError{test}{Patching failed, Applied \theerc@counter\space patches but it should have been 9. I can't continue. Sorry}{There should have been 9 patches applied. So if this fails, the definition of the checkboxes and oneparcheckboxes environment have changed since exam class version 2.603. Please contact the author of this package.}
    \stop
  \fi
\fi


%%
%% \@@createrandomlist
%%
%% This macro creates a randomly ordered list from the choices given in the
%% environments randomizechoices, randomizeoneparchoices, randomizecheckboxes,
%% and randomizeoneparcheckboxes. Typesetting is left to the respective
%% environment.
%%
%% Ideas taken from the mcexam package, see https://ctan.org/pkg/mcexam

\newcounter{@nrcorrectchoices}

\newif\if@@erckeeplast
\newif\if@@ercrandom
\newif\if@@nolabel
\newcommand{\@@createrandomlist}[1][]{%
  %%
  \if@@ercdebug
    \PackageWarning{exam-randomizechoices}{Parsing question \thequestion}%
  \fi
  %%
  %% Copy the global package options
  \if@@ercgkeeplast\@@erckeeplasttrue\else\@@erckeeplastfalse\fi
  \if@@ercgrandom\@@ercrandomtrue\else\@@ercrandomfalse\fi
  %%
  %% Check if label can be used
  \@@nolabelfalse
  %%
  %% Check if the user has defined our special command
  \ifdefined\inaccessible
    \if@@ercdebug
      \PackageWarning{exam-randomizechoices}{You should NOT define \noexpand\inaccessible}%
    \else
      \PackageError{exam-randomizechoices}{You should NOT define \noexpand\inaccessible. Emergency stop!}{Somewhere in your document, you have defined the macro \noexpand\inaccessible. This package relies on the fact that this macro is not defined. Please use another macro name instead. I have to stop now. Sorry.}%
      \stop
    \fi
  \fi
  %%
  %% This list to typeset
  \gdef\@typesetchoices{}%
  \def\@incr{\stepcounter{@nrcorrectchoices}}%
  %%
  %% Parse options to question
  \foreach \@@option in {#1} {%
    \if@@ercdebug
      \PackageWarning{exam-randomizechoices}{I found option: \@@option}%
    \fi
    \ifdefstring{\@@option}{keeplast}{\global\@@erckeeplasttrue}{}%
    \ifdefstring{\@@option}{nokeeplast}{\global\@@erckeeplastfalse}{}%
    \ifdefstring{\@@option}{randomize}{\global\@@ercrandomtrue}{}%
    \ifdefstring{\@@option}{norandomize}{\global\@@ercrandomfalse}{}%
    \ifdefstring{\@@option}{@nolabel}{\global\@@nolabeltrue}{}%
  }%
  %%
  %% Counter for counting the number of choices
  \setcounter{erc@counter}{-1}%
  %% Counter for counting the number of correct choices
  \setcounter{@nrcorrectchoices}{0}%
  %%
  %% Patch \BODY, \correctchoice and \CorrectChoice are replaced by \choice \inaccessible
  %% We need to do this for the following step, which is splitting the list
  %% into list items, because the list parser can only handle one separator at
  %% a time.
  \newbool{@@stillpatching}%
  \booltrue{@@stillpatching}%
  \whileboolexpr{ test {\ifbool{@@stillpatching}}}{%
    \patchcmd{\BODY}{\CorrectChoice}{\choice \inaccessible }{\@incr}{\boolfalse{@@stillpatching}}%
  }%
  \booltrue{@@stillpatching}%
  \whileboolexpr{ test {\ifbool{@@stillpatching}}}{%
    \patchcmd{\BODY}{\correctchoice}{\choice \inaccessible }{\@incr}{\boolfalse{@@stillpatching}}%
  }%
  %%
  %% We need exactly one \CorrectChoice, so throw an error if not.
  \ifnum \the@nrcorrectchoices=1\relax\else
    \PackageError{exam-randomizechoices}{You need exactly one \string\CorrectChoice, I found \the@nrcorrectchoices\space in question \thequestion}{Sorry.}%
  \fi
  %%
  %% Declare list \erc@@list and separator \choice
  \DeclareListParser{\erc@@list}{\choice}%
  %% Declare list iterator command
  \renewcommand\do[1]{%
    \stepcounter{erc@counter}%
    \long\csgdef{erc@answer\roman{erc@counter}}{##1}%
  }%
  %% Put an \@empty in front of \BODY and create the list
  \expandafter\erc@@list\expandafter{\expandafter\@empty\BODY}%
  %%
  %% Emit the number of choices found, error if less than two.
  \ifnum \theerc@counter<2\relax
    \PackageError{exam-randomizechoices}{You need at least two choices in question \thequestion}{Sorry.}%
  \else
    \if@@ercdebug
      \PackageWarning{exam-randomizechoices}{I found \theerc@counter\space choices}%
    \fi
  \fi
  %%
  %% Check if there is text before the first \choice, \CorrectChoice or \correctchoice
  %% and emit an error if so.
  \setbox0=\hbox{\csuse{erc@answer}\unskip}%
  \ifdim\wd0=0pt\else
    \PackageError{exam-randomizechoices}{Something's wrong, perhaps a missing \string\choice\space or \string\CorrectChoice\space or \string\correctchoice\space in question \thequestion}{You cannot have text before the first \string\choice, \string\CorrectChoice\space or \string\correctchoice.}%
  \fi
  %%
  %% Create a set of macros in the form of \erc@answerTempnum<number> where
  %% we keep track of the choicenumbers.  
  \foreach \a in {1,...,\theerc@counter}{%
    \csxdef{erc@answerTempnum\a}{\a}%
  }%
  %%
  %% If randomize question...
  \if@@ercrandom
    %% If we should randomize...
    \if@@ercdebug
      \PackageWarning{exam-randomizechoices}{Randomizing...}%
    \fi
    %%
    %% We need to perform a number of swaps to perform randomization
    %% We do this on the \erc@answerTempnum<number> macros because it's
    %% a pain to do it on the choices itself
    \numdef\@numberofswaps{\theerc@counter-1}%
    %%
    %% User didn't set the seed	
	\if@@seedset
	\else
	  \PackageWarning{exam-randomizechoices}{You didn't set the randomizer seed}%
	\fi
    %%
    %% Randomize the choice number list  
    \foreach \x in {1,...,\@numberofswaps} {%
      \if@@erckeeplast
        \pgfmathrandominteger{\r}{\x}{\@numberofswaps}%
      \else
	    \pgfmathrandominteger{\r}{\x}{\theerc@counter}%
      \fi
	  %%   
      %% Swap the items
      \letcs\@temp{erc@answerTempnum\x}%
      \global\csletcs{erc@answerTempnum\x}{erc@answerTempnum\r}%
      \global\cslet{erc@answerTempnum\r}{\@temp}%
    }
    \if@@ercdebug
      \PackageWarning{exam-randomizechoices}{Done randomizing...}%
    \fi
  \fi	
  %%
  %% We travel the list items. If an item begin with the special marker
  %% \inaccessible, we prepend it with \correctchoice, otherwise we prepend it
  %% with \choice. At the end we have all the list items prepended with
  %% either \choice or \correctchoice. Then we append the list item to
  %% the list.
  \ifnum\theerc@counter>0\relax
    \foreach \@choicenumber in {1,...,\theerc@counter} {%
      %% Patchcmd doesn't like \usecs as command, so use an temporary macro with \let
      \letcs{\@@tempnr}{erc@answerTempnum\@choicenumber}%
      \letcs{\@temp}{erc@answer\romannumeral \@@tempnr}%
      %%
        %% Patch \inaccessible for \correctchoice in \@temp, otherwise prepend \choice to \@temp
        \if@@nolabel
          \patchcmd{\@temp}{\inaccessible }{\correctchoice }{}{\gpreto{\@temp}{\choice}}%
        \else
          \patchcmd{\@temp}{\inaccessible}{\correctchoice \label{question@\thequestion @correctchoice}}{}{\gpreto{\@temp}{\choice}}%
        \fi
      %% Add expanded once version of \@temp to the dummy list
      \xappto{\@typesetchoices}{\expandonce{\@temp}}%
    }%
  \fi
}%



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% Overloading the choices, oneparchoices, checkboxes and oneparcheckboxes
%% environments (or not overloading)
%%
%% See https://tex.stackexchange.com/questions/116670/duplicating-environments
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%
%% Overload the choices environment
%%

\if@@ercoverload
  \if@@ercdebug
      \PackageWarning{exam-randomizechoices}{Overloading choices environment}%
  \fi

  %% Save choices environment
  \let\@oldchoices\choices
  \let\end@oldchoices\endchoices

  %% Renew the choices environment
  \RenewEnviron{choices}[1][]{
    %%
    %% Create a random list
    \@@createrandomlist[#1]%
    %%
    %% Start the choices environment
    \begin{@oldchoices}%
       % Execute the list
       \@typesetchoices%
    \end{@oldchoices}%
  }

  \NewEnviron{randomizechoices}[1][]{
    %%
    %% Create a random list
    \@@createrandomlist[#1]%
    %%
    %% Start the choices environment
    \begin{@oldchoices}%
      % Execute the list
      \@typesetchoices%
    \end{@oldchoices}%
  }
\else
  \NewEnviron{randomizechoices}[1][]{
    %%
    %% Create a random list
    \@@createrandomlist[#1]%
    %%
    %% Start the choices environment
    \begin{choices}%
      % Execute the list
      \@typesetchoices%
    \end{choices}%
  }
\fi

%%
%% Overload the oneparchoices environment
%%
\if@@ercoverload
  \if@@ercdebug
      \PackageWarning{exam-randomizechoices}{Overloading oneparchoices environment}
  \fi

  %% Save oneparchoices environment
  \let\@oldoneparchoices\oneparchoices
  \let\end@oldoneparchoices\endoneparchoices

  %% Renew the oneparchoices environment
  \RenewEnviron{oneparchoices}[1][]{
    %%
    %% Create a random list
    \@@createrandomlist[#1]%
    %%
    %% Start the oneparchoices environment
    \begin{@oldoneparchoices}%
       % Execute the list
       \@typesetchoicesT
    \end{@oldoneparchoices}%
  }

  \NewEnviron{randomizeoneparchoices}[1][]{
    %%
    %% Create a random list
    \@@createrandomlist[#1]%
    %%
    %% Start the oneparchoices environment
    \begin{@oldoneparchoices}%
      % Execute the list
      \@typesetchoices%
    \end{@oldoneparchoices}%
  }

\else
  \NewEnviron{randomizeoneparchoices}[1][]{
    %%
    %% Create a random list
    \@@createrandomlist[#1]%
    %%
    %% Start the oneparchoices environment
    \begin{oneparchoices}%
      % Execute the list
      \@typesetchoices%
    \end{oneparchoices}%
  }
\fi

%%
%% Overload the checkboxes environment
%%
\if@@ercoverload
  \if@@ercdebug
      \PackageWarning{exam-randomizechoices}{Overloading checkboxes environment}
  \fi

  %% Save choices environment
  \let\@oldcheckboxes\checkboxes
  \let\end@oldcheckboxes\endcheckboxes

  %% Renew the oneparchoices environment
  \RenewEnviron{checkboxes}[1][]{
    %%
    %% Create a random list
    \@@createrandomlist[#1,@nolabel]%
    %%
    %% Start the choices environment
    \begin{@oldcheckboxes}%
       % Execute the list
       \@typesetchoices%
    \end{@oldcheckboxes}%
  }

  \NewEnviron{randomizecheckboxes}[1][]{%
    %%
    %% Create a random list
    \@@createrandomlist[#1,@nolabel]%
    %%
    %% Start the choices environment
    \begin{@oldcheckboxes}%
      % Execute the list
      \@typesetchoices%
    \end{@oldcheckboxes}%
  }

\else
  \NewEnviron{randomizecheckboxes}[1][]{
    %%
    %% Create a random list
    \@@createrandomlist[#1,@nolabel]
    %%
    %% Start the oneparchoices environment
    \begin{checkboxes}%
      % Execute the list
      \@typesetchoices%
    \end{checkboxes}%
  }
\fi

%%
%% Overload the oneparcheckboxes environment
%%
\if@@ercoverload
  \if@@ercdebug
      \PackageWarning{exam-randomizechoices}{Overloading oneparcheckboxes environment}
  \fi

  %% Save oneparcheckboxes environment
  \let\@oldoneparcheckboxes\oneparcheckboxes
  \let\end@oldoneparcheckboxes\endoneparcheckboxes

  %% Renew the oneparcheckboxes environment
  \RenewEnviron{oneparcheckboxes}[1][]{
    %%
    %% Create a random list
    \@@createrandomlist[#1,@nolabel]%
    %%
    %% Start the oneparcheckboxes environment
    \begin{@oldoneparcheckboxes}%
       % Execute the list
       \@typesetchoices%
    \end{@oldoneparcheckboxes}%
  }

  \NewEnviron{randomizeoneparcheckboxes}[1][]{%
    %%
    %% Create a random list
    \@@createrandomlist[#1,@nolabel]%%
    %%
    %% Start the oneparcheckboxes environment
    \begin{@oldoneparcheckboxes}%
      % Execute the list
      \@typesetchoices%
    \end{@oldoneparcheckboxes}%
  }

\else
  \NewEnviron{randomizeoneparcheckboxes}[1][]{%
    %%
    %% Create a random list
    \@@createrandomlist[#1,@nolabel]%
    %%
    %% Start the onrparcheckboxes environment
    \begin{oneparcheckboxes}%
      % Execute the list
      \@typesetchoices%
    \end{oneparcheckboxes}%
  }
\fi

%%
%% Simple key table printer
%%
%% Building a table with \foreach from the pgffor package is hard to do.
%% See https://tex.stackexchange.com/questions/367979/latex-foreach-in-tabular-environment
%% So we use a file \jobname.keytable and populate it with table typesetting
%% commands. When done, we \input the key table
%%
\newcommand{\printkeytable}{%
  %%
  %% Open the key table file for writing and add some preface content.
  \newwrite\tempfile
  \immediate\openout\tempfile=\jobname.keytable
  \immediate\write\tempfile{\@percentchar}%
  \immediate\write\tempfile{\@percentchar\space Automatically generated key table file}%
  \immediate\write\tempfile{\@percentchar\space written by package exam-randomizechoices}%
  \immediate\write\tempfile{\@percentchar\space File written at \today\space (\number\year/\two@digits\month/\two@digits\day)}% doesn't behave well
  \immediate\write\tempfile{\@percentchar}%
  \immediate\write\tempfile{\@percentchar\space Edits to this file are lost}%
  \immediate\write\tempfile{\@percentchar\space This file may safely be removed}%
  \immediate\write\tempfile{\@percentchar}%
  \immediate\write\tempfile{\string\begin{tabular} {|c|c|}}%
  \immediate\write\tempfile{\string\hline}%
  \immediate\write\tempfile{Question & Answer \cr \string\hline}%
  %%
  %% Write the table entries.
  \ifnum\thequestion=0\relax
  \else
    \foreach \x in {1,...,\thequestion} {%
      \@ifundefined{r@question@\x @correctchoice}{%
        %not found
        \immediate\write\tempfile{\string\ref{question@\x} & \string\textbf{??} \cr}%
      }{%
        %found
        \immediate\write\tempfile{\string\ref{question@\x} & \string\ref{question@\x @correctchoice} \cr}%
      }%
    }%
  \fi
  %%
  %% Write epilogue content and close the file
  \immediate\write\tempfile{\string\hline}%
  \immediate\write\tempfile{\string\end{tabular} }%
  \immediate\write\tempfile{\string\endinput}%
  \immediate\closeout\tempfile
  %%
  %% Input the file to typeset the table.
  \input{\jobname.keytable}%
}

%%
%% Simple key list file writer
%%
\def\writekeylist#1{%
  %%
  \def\erc@macroname{#1}%
  %% Open the key list file for writing and add some preface content.
  \newwrite\tempfile
  \immediate\openout\tempfile=\jobname.keylist
  \immediate\write\tempfile{\@percentchar}%
  \immediate\write\tempfile{\@percentchar\space Automatically generated key list file}%
  \immediate\write\tempfile{\@percentchar\space written by package exam-randomizechoices}%
  \immediate\write\tempfile{\@percentchar\space File written at \today\space (\number\year/\two@digits\month/\two@digits\day)}% doesn't behave well
  \immediate\write\tempfile{\@percentchar}%
  \immediate\write\tempfile{\@percentchar\space Edits to this file are lost}%
  \immediate\write\tempfile{\@percentchar\space This file may safely be removed}%
  \immediate\write\tempfile{\@percentchar}%
  %%
  %% Create a command that has all the question numbers / questio keys
  %% separated by a /
  \gdef\erc@keylist{\@gobble}%
  %% Write the list entries.
  \ifnum\thequestion=0\relax
    \gdef\erc@keylist{}%
  \else
    \foreach \x in {1,...,\thequestion} {%
      \@ifundefined{r@question@\x @correctchoice}{%
        %not found
        \xdef\erc@keylist{\erc@keylist,\x/?}%
      }{%
        %found
       \xdef\erc@keylist{\erc@keylist,\x/\getrefnumber{question@\x @correctchoice}}%
      }%
    }%
  \fi
  %%
  %% Write the gdef with key list in one write. This prevents Latex to
  %% add end-of-line characters. After that, close the file. 
  \immediate\write\tempfile{\string\gdef\expandafter\string\erc@macroname\@charlb\erc@keylist\@charrb}%
  \immediate\write\tempfile{\string\endinput}%
  \immediate\closeout\tempfile
}

\endinput
